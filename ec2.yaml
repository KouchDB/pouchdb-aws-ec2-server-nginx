# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ec2.html
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EnvironmentPrefix:
    Type: String
    Default: "test-"
  ImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Type: String
    Default: t3.nano
  LocalZone:
    Type: String
    Default: "-lax-1"
  SshAdminWhitelistCIDR:
    Type: String
  DiskSizeGB:
    Type: Integer
    Default: 20

Resources:

  Ec2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True

  Ec2SubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId: !Ref Ec2VPC
      AvailabilityZone: !Sub "${AWS::Region}${LocalZone}a"
      MapPublicIpOnLaunch: true

  Ec2SubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId: !Ref Ec2VPC
      AvailabilityZone: !Sub "${AWS::Region}${LocalZone}b"
      MapPublicIpOnLaunch: true

  StackRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Ec2VPC
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentPrefix}rtb"

  StackRouteExternal:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref TheInternetGateway
      RouteTableId: !Ref StackRouteTable

  SubnetRouteAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref StackRouteTable
      SubnetId: !Ref Ec2SubnetOne

  SubnetRouteAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref StackRouteTable
      SubnetId: !Ref Ec2SubnetTwo
  
  TheInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentPrefix}igw"
    
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref TheInternetGateway
      VpcId: !Ref Ec2VPC

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: Ec2VPC
    Properties:
      GroupDescription: Allow CouchDB public access on port 5984, and SSH from specified whitelist.
      VpcId: !Ref Ec2VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref SshAdminWhitelistCIDR
        - IpProtocol: tcp
          FromPort: 5984
          ToPort: 5984
          CidrIp: 0.0.0.0/0

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub "${AWS::StackName}-ec2-profile"
      Roles: 
        - !Ref IamInstanceRole

  IamInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: InlinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - "ecs:*"
                - "log:*"
                - "ecr:*"
                Resource: '*'
              - Effect: Allow
                Action:
                - "ssm:PutParameter"
                Resource: "*"

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      SubnetId: !Ref Ec2SubnetOne
      SecurityGroupIds:
      - !GetAtt Ec2SecurityGroup.GroupId
      IamInstanceProfile: !Ref Ec2InstanceProfile
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
              VolumeSize: !Ref DiskSizeGB
              VolumeType: gp3
              DeleteOnTermination: false
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe

            yum update -y
            yum install docker -y
            systemctl start docker

            cd /root

            PASSWORD=$(dd status=none if=/dev/random count=1 | sha256sum |cut -c-32)
            aws ssm put-parameter --name ${EnvironmentPrefix}pouchdb-admin --type String --value $PASSWORD --region ${AWS::Region} --overwrite

            cat >nginx.conf <<EOF
            server {
                listen 8080;
                location / {
                    auth_basic "Authentication Required";
                    auth_basic_user_file /etc/nginx/.htpasswd;
                    proxy_set_header    Host               \$host;
                    proxy_pass          http://localhost:5984;
                    proxy_read_timeout  900;
                    proxy_http_version  1.1;
                    proxy_set_header Authorization "";
                }
            }
            EOF
            
            cat >bootstrap.sh <<EOF
            #!/bin/sh
            PATH=/usr/app/node_modules/pouchdb-server/bin/:$PATH
            pouchdb-server -o 0.0.0.0 -d /data &
            /docker-entrypoint.sh nginx
            wait
            EOF

            cat >Dockerfile <<EOF
            FROM nginx:alpine
            RUN apk add nodejs npm apache2-utils
            
            # install pouchdb-server
            WORKDIR /usr/app
            RUN npm init -f
            RUN npm install pouchdb-fauxton
            RUN npm install pouchdb-server
            RUN cd node_modules/pouchdb-fauxton && npm link
            RUN cd node_modules/pouchdb-server && npm link pouchdb-fauxton
            
            # install nginx proxy for authentication
            COPY nginx.conf /etc/nginx/conf.d/default.conf
            ARG USERNAME
            ARG PASSWORD
            RUN htpasswd -b -c /etc/nginx/.htpasswd \$USERNAME \$PASSWORD
            
            EXPOSE 8080
            COPY bootstrap.sh .
            ENTRYPOINT [ "sh", "bootstrap.sh" ]            
            EOF

            docker build -t pouchdb_server --build-arg USERNAME=pouchdbadmin --build-arg PASSWORD=$PASSWORD .

            echo "systemctl start docker && docker run -p 5984:8080 -v/data:/data -t pouchdb_server" >> /etc/rc.local
            mkdir /data && chmod 777 /data
            chmod +x /etc/rc.local && /etc/rc.local &

            # CloudFormation integration
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets MountConfig --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

